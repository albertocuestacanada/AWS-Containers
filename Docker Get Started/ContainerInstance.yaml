AWSTemplateFormatVersion: 2010-09-09
Description: 'This template builds upon NetworkAndSecurity.yaml to create an ECS Cluster and a EC2 Container Instance. I plant to use this stack to learn how to register container instances to an ECS Cluster'

Parameters:
  KeyNameParam:
    Description: EC2 Instance SSH Key
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceTypeParam:
    Description: EC2 instance specs configuration
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium

Mappings:
  AMIs:
    eu-west-1:
      Name: ami-9cbe9be5

Resources:

  EC2Instance:
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
  # A docker server needs to allow inbound HTTP traffic on port 80 to communicate with the ECR container registry
  # Attaching IAM roles to EC2 -> https://hackernoon.com/attach-an-iam-role-to-an-ec2-instance-with-cloudformation-33c517a8d4c3
    Type: "AWS::EC2::Instance"
    Metadata:
      Comment: Install a Docker Container Instance
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              docker: []
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}
          commands:
            docker-permissions:            
              command: usermod -a -G docker ec2-user
              cwd: /
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties: 
      IamInstanceProfile: !ImportValue IAMInstanceProfileECRFullAccessOut
      ImageId: !FindInMap [ AMIs, !Ref 'AWS::Region', Name]
      InstanceType: !Ref InstanceTypeParam
      KeyName: !Ref KeyNameParam
      SecurityGroupIds: 
        - !ImportValue EC2SecurityGroupSSHGroupIdOut
        - !ImportValue EC2SecurityGroupHTTPGroupIdOut
      SubnetId: !ImportValue EC2Subnet1Out
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y
            # cfn-init handling
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            echo "/opt/aws/bin/cfn-init -s ${AWS::StackId} -r EC2Instance --region=${AWS::Region} -v"
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r EC2Instance --region=${AWS::Region} -v
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            /opt/aws/bin/cfn-hup
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region=${AWS::Region}
